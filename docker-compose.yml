services:
  app:
    build:
      context: ./docker/php         # passt zu deinem Layout
      dockerfile: Dockerfile        # falls du einen eigenen Dockerfile-Pfad nutzt
    image: symfony-product-microservice
    working_dir: /var/www/app
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
    volumes:
      - ${PATH_TO_SYMFONY_PROJECT:-.}:/var/www/app:delegated
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini:ro
    environment:
      APP_ENV: dev                  # in stage/prod per Override überschreiben
      XDEBUG_MODE: ${XDEBUG_MODE:-off}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - db
    # PHP-FPM braucht KEIN host-port mapping
    expose:
      - "9000"                      # nur intern für Nginx sichtbar
    networks: [symfony-ms-network]

  web:
    image: nginx:stable
    depends_on: [app]
    volumes:
      - ${PATH_TO_SYMFONY_PROJECT:-.}:/var/www/app:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    # Host-Ports über .env konfigurierbar:
    ports:
      - "${WEB_HTTP_PORT:-8080}:80"
    networks: [symfony-ms-network]

  db:
    image: mariadb:11
    environment:
      MARIADB_USER: ${DB_USER:-symfony}
      MARIADB_PASSWORD: ${DB_PASSWORD:-symfony}
      MARIADB_DATABASE: ${DB_NAME:-symfony_microservice}
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root}
    volumes:
      - symfony-ms-data:/var/lib/mysql
    # In dev kannst du die DB exposen. In stage/prod i.d.R. NICHT!
    # Wenn du es brauchst, setz DB_HOST_PORT in .env (z. B. 3307)
    # ACHTUNG: Compose erlaubt kein "leeres" Mapping → nutze Override-Datei (siehe unten)
    networks: [symfony-ms-network]

  adminer:
    image: adminer:latest
    depends_on: [db]
    ports:
      - "${ADMINER_HTTP_PORT:-8081}:8080"
    networks: [symfony-ms-network]

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:

###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
  symfony-ms-data:

networks:
  symfony-ms-network:
    driver: bridge
